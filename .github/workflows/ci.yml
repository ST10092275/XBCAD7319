name: CI Pipeline for Kotlin App

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Setup Java environment
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'  # Use 'temurin' instead of 'adoptopenjdk'

      # Step 3: Cache Gradle dependencies
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 4: Install Gradle dependencies
      - name: Install Dependencies
        run: ./gradlew dependencies

      # Step 5: Run unit tests
      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest

      # Step 6: Build APK
      - name: Build APK
        run: ./gradlew assembleDebug

      # Step 7: Upload APK as an artifact
      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk

      # Step 8: Run Detekt (Static Code Analysis)
      - name: Run Detekt
        run: ./gradlew detekt
        continue-on-error: true  # Ensures build continues if Detekt fails

      # Step 9: Initialize CodeQL for security analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: java

      # Step 10: Perform CodeQL analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

